grammar Porkchop
  rule program
    space statements space
  end
  
  rule end_of_line
    "\r\n" / "\n" / "\r"
  end
  
  rule statements
    statement+
  end
  
  rule statement
    expression end_of_line space
  end
  
  rule definition
    identifier space ':' space expression
  end
    
  rule expression
    definition / string / number / table / list / function_call
  end
  
  rule identifier
    [a-z_]+
  end
  
  rule number
    [\d]+
  end
    
  rule list
    '(' (expression ','? space)+ ')'
  end

  rule table
    '(' (space definition (end_of_line / ','? space))+ ')'
  end
  
  rule block
    '{' statements '}'
  end
  
  rule function_call
    identifier space list? block?
  end

  rule assignment_operator
    ':'
  end

  rule string
    single_quoted_string / double_quoted_string
  end

  rule double_quoted_string
    '"' string:(!'"' ("\\\\" / '\"' / .))* '"' {
      def eval(env = Environment.new)
        string.text_value
      end
    }
  end

  rule single_quoted_string
    "'" string:(!"'" ("\\\\" / "\\'" / .))* "'" {
      def eval(env = Environment.new)
        string.text_value
      end
    }
  end
  
  rule comment
    comment_to_eol / multiline_comment
  end

  rule multiline_comment
  '/*' (!'*/' . )* '*/'
  end

  rule comment_to_eol
    '#' (!"\n" .)*
  end
  
  # whitespace
  rule white 
    [ \r\t\n]+
  end

  # mandatory space
  rule SPACE
    (white / comment)+ 
  end

  # optional space
  rule space
    SPACE?
  end
end