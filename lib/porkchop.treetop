grammar Porkchop
  rule program
    space statements space
  end
  
  rule end_of_line
    "\r\n" / "\n" / "\r"
  end
  
  rule statements
    statement+
  end
  
  rule statement
    expression end_of_line space
  end
  
  rule variable_assignment
    variable space assignment_operator space expression
  end
  
  rule variable
    identifier
  end
  
  rule expression
    variable_assignment / string_literal / number_literal / list
  end
    
  rule identifier
    [a-z_]+
  end
  
  rule number_literal
    [\d]+
  end
  
  rule message
    identifier block?
  end
  
  rule arguments
    list
  end
  
  rule list
    '(' (expression ','? space)+ ')'
  end
  
  rule block
    '{' statements '}'
  end

  rule assignment_operator
    ':'
  end

  rule string_literal
    single_quoted_string / double_quoted_string
  end

  rule double_quoted_string
    '"' string:(!'"' ("\\\\" / '\"' / .))* '"' {
      def eval(env = Environment.new)
        string.text_value
      end
    }
  end

  rule single_quoted_string
    "'" string:(!"'" ("\\\\" / "\\'" / .))* "'" {
      def eval(env = Environment.new)
        string.text_value
      end
    }
  end
  
  rule comment
    comment_to_eol / multiline_comment
  end

  rule multiline_comment
  '/*' (!'*/' . )* '*/'
  end

  rule comment_to_eol
    # TODO find out why this doesn't work in specs
    #'#' (!"\n" .)+ "\n"

    '#' (!"\n" .)*
  end
  
  # whitespace
  rule white 
    [ \r\t\n]+
  end

  # mandatory space
  rule SPACE
    (white / comment)+ 
  end

  # optional space
  rule space
    SPACE?
  end
end