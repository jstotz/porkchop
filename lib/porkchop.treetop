grammar Porkchop
  rule program
    space statements space <Program>
  end
  
  rule eol
    "\r\n" / "\n" / "\r" / eof
  end

  rule eof
    !.
  end
    
  rule statements
    statement+
  end
  
  rule statement
    space expression (eol / ';') space <Statement>
  end
  
  rule expression
    assignment / block / string / number / list / function_call
  end

  rule assignment
    name space assignment_operator space expression <Assignment>
  end
    
  rule name
    [a-z_0-9+\.]+ <Name>
  end
  
  rule symbol
    '@' name <Symbol>
  end
      
  rule list
    '[' list_elements:(value:(expression / name / symbol) ','? space)+ ']' <List>
  end
  
  rule block
    list? space '{' program '}' <Block>
  end
  
  rule function_call
    name space arguments:(list / function_call) <FunctionCall>
  end

  rule assignment_operator
    ':'
  end

  rule comment
    '#' (!eol .)* <Comment>
  end

  # primitives
  rule number
    real_number / integer_number
  end

  rule integer_number
    '-'? ([1-9] [0-9]* / '0') <Integer>
  end

  rule real_number
    '-'? [0-9]* '.' [0-9]* <RealNumber>
  end

  rule string
    single_quoted_string / double_quoted_string
  end

  rule double_quoted_string
    '"' string:(!'"' ("\\\\" / '\"' / .))* '"' <String>
  end

  rule single_quoted_string
    "'" string:(!"'" ("\\\\" / "\\'" / .))* "'" <String>
  end

  # whitespace
  rule white 
    [ \r\t\n]+
  end

  # mandatory space
  rule SPACE
    (white / comment)+ 
  end

  # optional space
  rule space
    SPACE?
  end
end