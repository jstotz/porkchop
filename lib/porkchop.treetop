grammar Porkchop
  rule program
    (comment / statement)+ <Program>
  end
      
  rule statement
    space? expression (eol / ';') space? <Statement>
  end
  
  rule expression
    assignment / block / literal / list / function_call / identifier / symbol
  end

  rule assignment
    identifier space? assignment_operator space? expression <Assignment>
  end
    
  rule identifier
    [a-z_0-9\+\-\*\.]+ <Identifier>
  end
  
  rule symbol
    '@' identifier <Symbol>
  end
      
  rule list
    '[' list_elements:(space? expression space?)+ ']' <List>
  end
  
  rule arguments
    '(' list_elements:(space? expression space?)+ ')' <List>
  end
  
  rule block
    list? space? '{' program '}' space? <Block>
  end
  
  rule function_call
    identifier space? arguments:arguments? space? block? <FunctionCall>
  end

  rule assignment_operator
    ':'
  end

  rule comment
    '#' [^"\n"]* eol <Comment>
  end

  # literals
  rule literal
    string / number / nil / true / false
  end
  
  rule nil
    "nil" <NilLiteral>
  end
  
  rule true
    "true" <TrueLiteral>
  end
  
  rule false
    "false" <FalseLiteral>
  end
  
  rule number
    integer / float
  end

  rule integer
    '-'? ([1-9] [0-9]* / '0') <IntegerLiteral>
  end

  rule float
    '-'? [0-9]* '.' [0-9]* <FloatLiteral>
  end

  rule string
    single_quoted_string / double_quoted_string
  end

  rule double_quoted_string
    '"' string:(!'"' ("\\\\" / '\"' / .))* '"' <StringLiteral>
  end

  rule single_quoted_string
    "'" string:(!"'" ("\\\\" / "\\'" / .))* "'" <StringLiteral>
  end

  rule space
    [\s]+
  end
  
  rule eol
    "\r\n" / "\n" / "\r" / eof
  end

  rule eof
    !.
  end
end